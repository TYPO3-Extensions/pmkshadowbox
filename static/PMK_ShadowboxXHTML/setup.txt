
page.1230 >
page.1230 = COA
page.1230 {
	# Add main Javascript framework (if set in constants)
	10 = USER
	10.userFunc = user_shadowbox->addJS
	10.jsfile.dataWrap = {path:{$plugin.pmkshadowbox.jsFramework}}
	
	# Include the Base adapter script 
	# Note: This part might be different/changed if a special adapter is chosen.
	# (See conditions later in this TS setup.)
	20 = USER
	20.userFunc = user_shadowbox->addJS
	20.jsfile.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-base.js}

	# Include javascript language file, based on selected FE language.
	# If language file doesn't exists, English is used.
	30 = USER
	30.userFunc = user_shadowbox->addJS
	30.jsfile.cObject = COA
	30.jsfile.cObject {
		10 = TEXT
		10.typolink.parameter.cObject = TEXT
		10.typolink.parameter.cObject.data = TSFE:lang
		10.typolink.parameter.cObject.wrap = {path:EXT:pmkshadowbox/res/build/lang/shadowbox-|.js}
		10.typolink.parameter.insertData = 1
		10.typolink.returnLast = url
		10.ifEmpty.typolink.parameter.dataWrap = {path:EXT:pmkshadowbox/res/build/lang/shadowbox-en.js}
		10.ifEmpty.typolink.returnLast = url
	}
	
	# Include the main script
	40 = USER
	40.userFunc = user_shadowbox->addJS
	40.jsfile.dataWrap = {path:EXT:pmkshadowbox/res/build/shadowbox.js}

	# Include player scripts
	50 = TEXT
	50.value  = {$plugin.pmkshadowbox.players}
	50.split {
		token = ,
		cObjNum = 1
		1 = COA
		1 {
			10 = LOAD_REGISTER
			10.current.current = 1
			10.current.trim = 1
			
			20 = USER
			20.userFunc = user_shadowbox->addJS
			20.jsfile.cObject = TEXT
			20.jsfile.cObject {
				typolink.parameter.cObject = TEXT
				typolink.parameter.cObject.data = register:current
				typolink.parameter.cObject.wrap = {path:EXT:pmkshadowbox/res/build/player/shadowbox-|.js}
				typolink.parameter.insertData = 1
				typolink.returnLast = url
			}
		}
	}
	
	# Include the skin script
	60 = USER
	60.userFunc = user_shadowbox->addJS
	60.jsfile.dataWrap = {path:{$plugin.pmkshadowbox.skinPath}/skin.js}

	# Insert inline activation code
	70 = USER
	70.userFunc = user_shadowbox->addJS
	70.jsdata.cObject = COA
	70.jsdata.cObject.wrap = window.onload = function(){ Shadowbox.init( {|} ); };
	70.jsdata.cObject.1 = TEXT
	70.jsdata.cObject.1.dataWrap (
		animate: {$plugin.pmkshadowbox.animate},
		animateFade: {$plugin.pmkshadowbox.animateFade},
		modal: {$plugin.pmkshadowbox.modal},
		autoplayMovies: {$plugin.pmkshadowbox.autoplayMovies},
		showMovieControls: {$plugin.pmkshadowbox.showMovieControls},
		displayNav: {$plugin.pmkshadowbox.displayNav},
		continuous: {$plugin.pmkshadowbox.continuous},
		displayCounter: {$plugin.pmkshadowbox.displayCounter},
		enableKeys: {$plugin.pmkshadowbox.enableKeys},
		initialWidth: {$plugin.pmkshadowbox.initialWidth},
		initialHeight: {$plugin.pmkshadowbox.initialHeight},
		counterLimit: {$plugin.pmkshadowbox.counterLimit},
		viewportPadding: {$plugin.pmkshadowbox.viewportPadding},
		resizeDuration: {$plugin.pmkshadowbox.resizeDuration},
		fadeDuration: {$plugin.pmkshadowbox.fadeDuration},
		slideshowDelay: {$plugin.pmkshadowbox.slideshowDelay},
		overlayOpacity: {$plugin.pmkshadowbox.overlayOpacity},
		animSequence: '{$plugin.pmkshadowbox.animSequence}',
		counterType: '{$plugin.pmkshadowbox.counterType}',
		handleOversize: '{$plugin.pmkshadowbox.handleOversize}',
		handleUnsupported: '{$plugin.pmkshadowbox.handleUnsupported}',
		handleException: {$plugin.pmkshadowbox.handleException},
		onOpen: {$plugin.pmkshadowbox.onOpen},
		onFinish: {$plugin.pmkshadowbox.onFinish},
		onChange: {$plugin.pmkshadowbox.onChange},
		onClose: {$plugin.pmkshadowbox.onClose},
		overlayColor: '{$plugin.pmkshadowbox.overlayColor}',
		flashBgColor: '{$plugin.pmkshadowbox.flashBgColor}',
		flvPlayer: '{path:{$plugin.pmkshadowbox.flvPlayer}}'
	)
}

# Include the skin CSS
page.headerData.1230 = TEXT
page.headerData.1230.dataWrap (
		<link rel="stylesheet" href="{path:{$plugin.pmkshadowbox.skinPath}/skin.css}" type="text/css" media="screen" />
)

[globalVar = LIT:1 = {$plugin.pmkshadowbox.adapter}]
# include the Dojo Toolkit adapter script
page.1230.20.jsfile.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-dojo.js}
[GLOBAL]

[globalVar = LIT:2 = {$plugin.pmkshadowbox.adapter}]
# include the Ext adapter script
page.1230.20.jsfile.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-ext.js}
[GLOBAL]

[globalVar = LIT:3 = {$plugin.pmkshadowbox.adapter}]
# include the MooTools adapter script
page.1230.20.jsfile.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-mootools.js}
[GLOBAL]

[globalVar = LIT:4 = {$plugin.pmkshadowbox.adapter}]
# include the Prototype adapter script
page.1230.20.jsfile.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-prototype.js}
[GLOBAL]

[globalVar = LIT:5 = {$plugin.pmkshadowbox.adapter}]
# include the YUI adapter script
page.1230.20.jsfile.dataWrap = {path:EXT:pmkshadowbox/res/shadowbox-2.0/build/adapter/shadowbox-yui.js}
[GLOBAL]

[globalVar = LIT:6 = {$plugin.pmkshadowbox.adapter}]
# include the jQuery adapter script
page.1230.20.jsfile.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-jquery.js}
[GLOBAL]



# Modify the standard TYPO3 "Click Enlarge" option, so that lightbox effect is used.  
tt_content.image.20.1 {

	titleText.field = {$plugin.pmkshadowbox.imgtext.captionField}
	titleText.htmlSpecialChars = 1
	
	# Removing the default "imageLinkWrap" TS code, and add new one to enable Lightbox effect.
	imageLinkWrap >
	imageLinkWrap = 1
	imageLinkWrap {

		# Enable linkwrapping if either click-enlarge is selected or a link is defined.
		enable.field = image_zoom
		enable.ifEmpty.typolink.parameter.field = image_link
		enable.ifEmpty.typolink.parameter.listNum.stdWrap.data = register : IMAGE_NUM_CURRENT
		enable.ifEmpty.typolink.returnLast = url

		# Add new typolink wrapping code
		typolink {
			target = {$styles.content.links.target}
			extTarget = {$styles.content.links.extTarget}

			# This returns a link, pointing to the path + name of the original image.
			# or to the path + name of the resized lightbox image (if maxH or maxW is reached.)
			parameter.cObject = IMG_RESOURCE
			parameter.cObject.file.import.data = TSFE:lastImageInfo|origFile
			#parameter.cObject.file.maxW = {$plugin.pmkshadowbox.slimBoxMaxW}
			#parameter.cObject.file.maxH = {$plugin.pmkshadowbox.slimBoxMaxH}
	
			# Except if the linkfield is not empty
			parameter.override.field = image_link
			parameter.override.listNum.stdWrap.data = register : IMAGE_NUM_CURRENT
			parameter.override.if.isTrue.field = image_link
		
			# Add the "rel" attribute needed to activate the lightbox effect.
			ATagParams = rel="shadowbox"
			ATagParams.override = rel="shadowbox[sb{field:uid}]"
			ATagParams.override.if.isTrue = {$plugin.pmkshadowbox.imgtext.navigable}
			ATagParams.insertData = 1
			ATagParams.if.isTrue.field = image_zoom

		}
	}
}
