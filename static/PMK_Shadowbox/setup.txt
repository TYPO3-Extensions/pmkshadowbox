page.headerData.1230 >
page.headerData.1230 = COA
page.headerData.1230 {
	1 = TEXT
	1 {
		wrap = <script type="text/javascript" src="|"></script>
		stdWrap.dataWrap = {path:{$plugin.pmkshadowbox.jsFramework}}
		if.isTrue.value = {$plugin.pmkshadowbox.jsFramework}
	}

	# Include the Base adapter script
	# Note: This part might be different/changed if a special adapter is chosen.
	# (See conditions later in this TS setup.)
	2 = COA
	2 {
		wrap = <script type="text/javascript" src="|"></script>

		10 = CASE
		10 {
			key = {$plugin.pmkshadowbox.adapter}
			default = TEXT
			default.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-base.js}

			1 = TEXT
			1.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-dojo.js}

			2 = TEXT
			2.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-ext.js}

			3 = TEXT
			3.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-mootools.js}

			4 = TEXT
			4.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-prototype.js}

			5 = TEXT
			5.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-yui.js}

			6 = TEXT
			6.dataWrap = {path:EXT:pmkshadowbox/res/build/adapter/shadowbox-jquery.js}
		}
	}

	# Include javascript language file, based on selected FE language.
	# If language file doesn't exists, fallback language is used.
	3 = COA
	3 {
		10 = TEXT
		10 {
			data = TSFE:lang
			wrap = {path:EXT:pmkshadowbox/res/build/lang/shadowbox-|.js}
			insertData = 1
		}

		stdWrap.wrap = <script type="text/javascript" src="|"></script>
		stdWrap.ifEmpty.dataWrap = {path:EXT:pmkshadowbox/res/build/lang/shadowbox-{$plugin.pmkshadowbox.fallbackLanguage}.js}
	}

	# Include the main script
	4 = TEXT
	4 {
		wrap = <script type="text/javascript" src="|"></script>
		stdWrap.dataWrap = {path:EXT:pmkshadowbox/res/build/shadowbox.js}
	}

	# Include player scripts
	5 = TEXT
	5 {
		value  = {$plugin.pmkshadowbox.players}
		split {
			token = ,
			cObjNum = 1
			1 = TEXT
			1 {
				current = 1
				trim = 1
				wrap2 = <script type="text/javascript" src="|"></script>
				wrap = {path:EXT:pmkshadowbox/res/build/player/shadowbox-|.js}
				insertData = 1
			}
		}
	}

	# Include the skin script
	6 = TEXT
	6 {
		wrap = <script type="text/javascript" src="|"></script>
		stdWrap.dataWrap = {path:{$plugin.pmkshadowbox.skinPath}/skin.js}
	}

	# Insert inline activation code
	7 = TEXT
	7 {
		wrap (
			<script type="text/javascript">
				/*<![CDATA[*/
				<!--
				function shadowBoxInit() {
					Shadowbox.init( {
						|
					} );
				}

				if (window.addEventListener) { 
					window.addEventListener('load', shadowBoxInit, false); 
				} else if (window.attachEvent) { 
					window.attachEvent('onload', shadowBoxInit); 
				}
				// -->
				/*]]>*/
			</script>
		)
		stdWrap.dataWrap (
			animate: {$plugin.pmkshadowbox.animate},
			animateFade: {$plugin.pmkshadowbox.animateFade},
			modal: {$plugin.pmkshadowbox.modal},
			autoplayMovies: {$plugin.pmkshadowbox.autoplayMovies},
			showMovieControls: {$plugin.pmkshadowbox.showMovieControls},
			displayNav: {$plugin.pmkshadowbox.displayNav},
			continuous: {$plugin.pmkshadowbox.continuous},
			displayCounter: {$plugin.pmkshadowbox.displayCounter},
			enableKeys: {$plugin.pmkshadowbox.enableKeys},
			initialWidth: {$plugin.pmkshadowbox.initialWidth},
			initialHeight: {$plugin.pmkshadowbox.initialHeight},
			counterLimit: {$plugin.pmkshadowbox.counterLimit},
			viewportPadding: {$plugin.pmkshadowbox.viewportPadding},
			resizeDuration: {$plugin.pmkshadowbox.resizeDuration},
			fadeDuration: {$plugin.pmkshadowbox.fadeDuration},
			slideshowDelay: {$plugin.pmkshadowbox.slideshowDelay},
			overlayOpacity: {$plugin.pmkshadowbox.overlayOpacity},
			animSequence: '{$plugin.pmkshadowbox.animSequence}',
			counterType: '{$plugin.pmkshadowbox.counterType}',
			handleOversize: '{$plugin.pmkshadowbox.handleOversize}',
			handleUnsupported: '{$plugin.pmkshadowbox.handleUnsupported}',
			handleException: {$plugin.pmkshadowbox.handleException},
			onOpen: {$plugin.pmkshadowbox.onOpen},
			onFinish: {$plugin.pmkshadowbox.onFinish},
			onChange: {$plugin.pmkshadowbox.onChange},
			onClose: {$plugin.pmkshadowbox.onClose},
			overlayColor: '{$plugin.pmkshadowbox.overlayColor}',
			flashBgColor: '{$plugin.pmkshadowbox.flashBgColor}',
			flvPlayer: '{path:{$plugin.pmkshadowbox.flvPlayer}}'
		)
	}

	# Include the skin CSS
	8 = TEXT
	8 {
		wrap = <link rel="stylesheet" href="|" type="text/css" media="screen" />
		stdWrap.dataWrap = {path:{$plugin.pmkshadowbox.skinPath}/skin.css}
	}
}

# Modify the standard TYPO3 "Click Enlarge" option, so that lightbox effect is used.
tt_content.image.20.1 {
	titleText.field = {$plugin.pmkshadowbox.imgtext.captionField}
	titleText.htmlSpecialChars = 1

	# Removing the default "imageLinkWrap" TS code, and add new one to enable Lightbox effect.
	imageLinkWrap >
	imageLinkWrap = 1
	imageLinkWrap {
		# Enable linkwrapping if either click-enlarge is selected or a link is defined.
		enable.field = image_zoom
		enable.ifEmpty.typolink.parameter.field = image_link
		enable.ifEmpty.typolink.parameter.listNum.stdWrap.data = register : IMAGE_NUM_CURRENT
		enable.ifEmpty.typolink.returnLast = url

		# Add new typolink wrapping code
		typolink {
			target = {$styles.content.links.target}
			extTarget = {$styles.content.links.extTarget}

			# This returns a link, pointing to the path + name of the original image.
			# or to the path + name of the resized lightbox image (if maxH or maxW is reached.)
			parameter.cObject = IMG_RESOURCE
			parameter.cObject.file.import.data = TSFE:lastImageInfo|origFile
			#parameter.cObject.file.maxW = {$plugin.pmkshadowbox.slimBoxMaxW}
			#parameter.cObject.file.maxH = {$plugin.pmkshadowbox.slimBoxMaxH}

			# Except if the linkfield is not empty
			parameter.override.field = image_link
			parameter.override.listNum.stdWrap.data = register : IMAGE_NUM_CURRENT
			parameter.override.if.isTrue.field = image_link

			# Add the "rel" attribute needed to activate the lightbox effect.
			ATagParams = rel="shadowbox"
			ATagParams.override = rel="shadowbox[sb{field:uid}]"
			ATagParams.override.if.isTrue = {$plugin.pmkshadowbox.imgtext.navigable}
			ATagParams.insertData = 1
			ATagParams.if.isTrue.field = image_zoom
		}
	}
}
