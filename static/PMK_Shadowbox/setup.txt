includeLibs.shadowboxCache = EXT:pmkshadowbox/class.tx_pmkshadowbox_cache.php

page.headerData.1230 >
page.headerData.1230 = COA
page.headerData.1230 {
	# this user function is used to merge the single javascript files into a single one
	# you can disable the feature in the extension manager
	stdWrap.postUserFunc = tx_pmkshadowbox_cache->main

	1 = TEXT
	1 {
		wrap = <script type="text/javascript" src="|"></script>
		stdWrap.dataWrap = {path:{$plugin.pmkshadowbox.jsFramework}}
		if.isTrue.value = {$plugin.pmkshadowbox.jsFramework}
	}

	# Include the main script
	2 = TEXT
	2 {
		wrap = <script type="text/javascript" src="|"></script>
		stdWrap.dataWrap = {path:EXT:pmkshadowbox/res/build/shadowbox.js}
	}

	# Include the Base adapter script
	# Note: This part might be different/changed if a special adapter is chosen.
	# (See conditions later in this TS setup.)
	3 = COA
	3 {
		wrap = <script type="text/javascript" src="|"></script>

		10 = CASE
		10 {
			key = {$plugin.pmkshadowbox.adapter}
			default = TEXT
			default.dataWrap = {path:EXT:pmkshadowbox/res/build/adapters/shadowbox-base.js}

			dojo = TEXT
			dojo.dataWrap = {path:EXT:pmkshadowbox/res/build/adapters/shadowbox-dojo.js}

			ext = TEXT
			ext.dataWrap = {path:EXT:pmkshadowbox/res/build/adapters/shadowbox-ext.js}

			mootools = TEXT
			mootools.dataWrap = {path:EXT:pmkshadowbox/res/build/adapters/shadowbox-mootools.js}

			prototype = TEXT
			prototype.dataWrap = {path:EXT:pmkshadowbox/res/build/adapters/shadowbox-prototype.js}

			yui = TEXT
			yui.dataWrap = {path:EXT:pmkshadowbox/res/build/adapters/shadowbox-yui.js}

			jquery = TEXT
			jquery.dataWrap = {path:EXT:pmkshadowbox/res/build/adapters/shadowbox-jquery.js}
		}
	}

	# Include javascript language file, based on selected FE language.
	# If language file doesn't exists, fallback language is used.
	4 = COA
	4 {
		10 = TEXT
		10 {
			data = TSFE:lang
			wrap = {path:EXT:pmkshadowbox/res/build/languages/shadowbox-|.js}
			insertData = 1
		}

		stdWrap.wrap = <script type="text/javascript" src="|"></script>
		stdWrap.ifEmpty.dataWrap = {path:EXT:pmkshadowbox/res/build/languages/shadowbox-{$plugin.pmkshadowbox.fallbackLanguage}.js}
	}

	# Include the skin script
	5 = TEXT
	5 {
		wrap = <script type="text/javascript" src="|"></script>
		stdWrap.dataWrap = {path:{$plugin.pmkshadowbox.skinPath}/skin.js}
	}

	# Include the skin CSS
	6 = TEXT
	6 {
		wrap = <link rel="stylesheet" href="|" type="text/css" />
		stdWrap.dataWrap = {path:{$plugin.pmkshadowbox.skinPath}/skin.css}
	}
}

# Generate inline initialisation code
temp.shadowBoxInit = COA
temp.shadowBoxInit {
	# check if the setup code should be skipped
	if.isFalse = {$plugin.pmkshadowbox.skipSetup}

	# image map initialisation
	20 = TEXT
	20.value (
				});
				function shadowBoxSetup() {
					var shadowBoxElements = document.getElementsByTagName('area');
					if (shadowBoxElements.length) {
						Shadowbox.setup(shadowBoxElements, {{$plugin.pmkshadowbox.imageMapOptions}});
					}
				}
				if (window.addEventListener) {
                	window.addEventListener('load', shadowBoxSetup, false);
            	} else if (window.attachEvent) {
            	    window.attachEvent('onload', shadowBoxSetup);
            	}
	)
	# no value if the imagemap setup stuff should be skipped
	20.override = });
	20.override.if.isTrue = {$plugin.pmkshadowbox.skipImageMapSetup}

	9 = TEXT
	9 {
		preUserFunc = tx_pmkshadowbox_cache->getPathToShadowboxRoot
		wrap (
				if(0) {a=1;} // js minifcation workaround (jsmin)
				Shadowbox.path = '|';
		)
	}

	10 = COA
	10 {
		# add shadowbox main initialisation
		wrap (
					Shadowbox.init({
						|
		)

		# add player config options
		1 = TEXT
		1 {
			value  = {$plugin.pmkshadowbox.players}
			wrap = players: [|],
			split {
				token = ,
				cObjNum = 1 |*||*| 2
				1 = TEXT
				1 {
					current = 1
					trim = 1
					wrap = "|",
				}
				2 < .1
				2.wrap = "|"
			}
		}

		# add language option 
		2 = TEXT
		2 {
			data = TSFE:lang
			override = {$plugin.pmkshadowbox.fallbackLanguage}
			override.if.isFalse.postUserFunc = tx_pmkshadowbox_cache->fileExists
			override.if.isFalse.postUserFunc.file.cObject = TEXT
			override.if.isFalse.postUserFunc.file.cObject {
				data = TSFE:lang
				wrap = {path:EXT:pmkshadowbox/res/build/languages/shadowbox-|.js}
				insertData = 1
			}
			wrap = language: "|",
		}

		3 = TEXT
		3.dataWrap (
			adapter: '{$plugin.pmkshadowbox.adapter}',
			animate: {$plugin.pmkshadowbox.animate},
			animateFade: {$plugin.pmkshadowbox.animateFade},
			animSequence: '{$plugin.pmkshadowbox.animSequence}',
			autoplayMovies: {$plugin.pmkshadowbox.autoplayMovies},
			autoplayMovies: {$plugin.pmkshadowbox.autoDimensions},
			continuous: {$plugin.pmkshadowbox.continuous},
			counterLimit: {$plugin.pmkshadowbox.counterLimit},
			counterType: '{$plugin.pmkshadowbox.counterType}',
			displayCounter: {$plugin.pmkshadowbox.displayCounter},
			displayNav: {$plugin.pmkshadowbox.displayNav},
			enableKeys: {$plugin.pmkshadowbox.enableKeys},
			fadeDuration: {$plugin.pmkshadowbox.fadeDuration},
			handleOversize: '{$plugin.pmkshadowbox.handleOversize}',
			handleUnsupported: '{$plugin.pmkshadowbox.handleUnsupported}',
			initialHeight: {$plugin.pmkshadowbox.initialHeight},
			initialWidth: {$plugin.pmkshadowbox.initialWidth},
			modal: {$plugin.pmkshadowbox.modal},
			onChange: {$plugin.pmkshadowbox.onChange},
			onClose: {$plugin.pmkshadowbox.onClose},
			onFinish: {$plugin.pmkshadowbox.onFinish},
			onOpen: {$plugin.pmkshadowbox.onOpen},
			overlayColor: '{$plugin.pmkshadowbox.overlayColor}',
			overlayOpacity: {$plugin.pmkshadowbox.overlayOpacity},
			resizeDuration: {$plugin.pmkshadowbox.resizeDuration},
			showOverlay: {$plugin.pmkshadowbox.showOverlay},
			showMovieControls: {$plugin.pmkshadowbox.showMovieControls},
			slideshowDelay: {$plugin.pmkshadowbox.slideshowDelay},
			useSizzle: {$plugin.pmkshadowbox.useSizzle},
			viewportPadding: {$plugin.pmkshadowbox.viewportPadding}
		)
	}
}

# Additional 3.0b options not added yet
/*
ease
errors
ext
flashParams
flashVars
*/

# adding the initialisation code as inlineJS
# the option was introduced in 4.2.0
[compatVersion = 4.2.0]
page.inlineJS.1230 < temp.shadowBoxInit
[else]
page.headerData.1230.10 < temp.shadowBoxInit
page.headerData.1230.10.wrap2 (
		<script type="text/javascript">
			/*<![CDATA[*/
			<!--
			|
			// -->
			/*]]>*/
		</script>
)
[end]

# adding the initialisation code using jsInline/jsFooterInline
# the inlineJS option was renamed to jsInline in 4.3.0
# Due to the stupid way TYPO3 4.3 adds the javascripts,
# there's no way to control in which order the scripts are placed.
# So in order for Shadowbox to work on 4.3 it must use "jsFooterInline"
# and place the init script at the bottom of the page.
[compatVersion = 4.3.0]
page.jsFooterInline.1230 < temp.shadowBoxInit
page.inlineJS.1230 >
[end]


# Modify the standard TYPO3 "Click Enlarge" option, so that lightbox effect is used.
tt_content.image.20.1 {
	titleText.field = {$plugin.pmkshadowbox.imgtext.captionField}
	titleText.htmlSpecialChars = 1

	# Removing the default "imageLinkWrap" TS code, and add new one to enable Lightbox effect.
	imageLinkWrap >
	imageLinkWrap = 1
	imageLinkWrap {
		# Enable linkwrapping if either click-enlarge is selected or a link is defined.
		enable.field = image_zoom
		enable.ifEmpty.typolink.parameter.field = image_link
		enable.ifEmpty.typolink.parameter.listNum.stdWrap.data = register : IMAGE_NUM_CURRENT
		enable.ifEmpty.typolink.returnLast = url

		# Add new typolink wrapping code
		typolink {
			target = {$styles.content.links.target}
			extTarget = {$styles.content.links.extTarget}

			# This returns a link, pointing to the path + name of the original image.
			# or to the path + name of the resized lightbox image (if maxH or maxW is reached.)
			parameter.cObject = IMG_RESOURCE
			parameter.cObject.file.import.data = TSFE:lastImageInfo|origFile

			# Except if the linkfield is not empty
			parameter.override.field = image_link
			parameter.override.listNum.stdWrap.data = register : IMAGE_NUM_CURRENT
			parameter.override.if.isTrue.field = image_link

			# Add the "rel" attribute needed to activate the lightbox effect.
			ATagParams = rel="shadowbox"
			ATagParams.override = rel="shadowbox[sb{field:uid}]"
			ATagParams.override.if.isTrue = {$plugin.pmkshadowbox.imgtext.navigable}
			ATagParams.insertData = 1
			ATagParams.if.isTrue.field = image_zoom
		}
	}
}
